{"version":3,"sources":["node_modules/pixify/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/check.js","src/convolution/ConvolutionFilter.js","src/convolution"],"names":["f","exports","module","define","amd","g","window","global","self","this","convolution","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","PIXI","ConvolutionFilter","matrix","width","height","Filter","prototype","Object","create","constructor","defineProperties","get","uniforms","set","value","Float32Array","texelSize","filter","filters"],"mappings":";;;;;;;CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,YAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,GCCA,GAAA,mBAAA0B,MACA,KAAA,IAAAN,OAAA,8DCcA,QAAAO,GAAAC,EAAAC,EAAAC,GAEAJ,KAAAK,OAAAR,KAAAf,KAEA,ySAEA,0xCAGAA,KAAAoB,OAAAA,EACApB,KAAAqB,MAAAA,EACArB,KAAAsB,OAAAA,EAGAH,EAAAK,UAAAC,OAAAC,OAAAR,KAAAK,OAAAC,WACAL,EAAAK,UAAAG,YAAAR,EACA1B,EAAAD,QAAA2B,EAEAM,OAAAG,iBAAAT,EAAAK,WAOAJ,QACAS,IAAA,WAEA,MAAA7B,MAAA8B,SAAAV,QAEAW,IAAA,SAAAC,GAEAhC,KAAA8B,SAAAV,OAAA,GAAAa,cAAAD,KAUAX,OACAQ,IAAA,WAEA,MAAA,GAAA7B,KAAA8B,SAAAI,UAAA,IAEAH,IAAA,SAAAC,GAEAhC,KAAA8B,SAAAI,UAAA,GAAA,EAAAF,IAUAV,QACAO,IAAA,WAEA,MAAA,GAAA7B,KAAA8B,SAAAI,UAAA,IAEAH,IAAA,SAAAC,GAEAhC,KAAA8B,SAAAI,UAAA,GAAA,EAAAF,8BClFAtB,EAAA,WAEA,IAAAyB,GAAAjB,KAAAkB,QAAAjB,kBAAAT,EAAA,sBAGA,oBAAAjB,IAAAA,EAAAD,UACAC,EAAAD,QAAA2C","file":"convolution.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Make sure PIXI global object is available\nif (typeof PIXI === \"undefined\") {\n    throw new Error('pixi.js is required to be included');\n}","\n\n/**\n * The ConvolutionFilter class applies a matrix convolution filter effect.\n * A convolution combines pixels in the input image with neighboring pixels to produce a new image.\n * A wide variety of image effects can be achieved through convolutions, including blurring, edge\n * detection, sharpening, embossing, and beveling. The matrix should be specified as a 9 point Array.\n * See http://docs.gimp.org/en/plug-in-convmatrix.html for more info.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param matrix {number[]} An array of values used for matrix transformation. Specified as a 9 point Array.\n * @param width {number} Width of the object you are transforming\n * @param height {number} Height of the object you are transforming\n */\nfunction ConvolutionFilter(matrix, width, height)\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying mediump vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec2 texelSize;\\nuniform float matrix[9];\\n\\nvoid main(void)\\n{\\n   vec4 c11 = texture2D(uSampler, vTextureCoord - texelSize); // top left\\n   vec4 c12 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - texelSize.y)); // top center\\n   vec4 c13 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y - texelSize.y)); // top right\\n\\n   vec4 c21 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y)); // mid left\\n   vec4 c22 = texture2D(uSampler, vTextureCoord); // mid center\\n   vec4 c23 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y)); // mid right\\n\\n   vec4 c31 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y + texelSize.y)); // bottom left\\n   vec4 c32 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + texelSize.y)); // bottom center\\n   vec4 c33 = texture2D(uSampler, vTextureCoord + texelSize); // bottom right\\n\\n   gl_FragColor =\\n       c11 * matrix[0] + c12 * matrix[1] + c13 * matrix[2] +\\n       c21 * matrix[3] + c22 * matrix[4] + c23 * matrix[5] +\\n       c31 * matrix[6] + c32 * matrix[7] + c33 * matrix[8];\\n\\n   gl_FragColor.a = c22.a;\\n}\\n\"\n    );\n\n    this.matrix = matrix;\n    this.width = width;\n    this.height = height;\n}\n\nConvolutionFilter.prototype = Object.create(PIXI.Filter.prototype);\nConvolutionFilter.prototype.constructor = ConvolutionFilter;\nmodule.exports = ConvolutionFilter;\n\nObject.defineProperties(ConvolutionFilter.prototype, {\n    /**\n     * An array of values used for matrix transformation. Specified as a 9 point Array.\n     *\n     * @member {number[]}\n     * @memberof PIXI.filters.ConvolutionFilter#\n     */\n    matrix: {\n        get: function ()\n        {\n            return this.uniforms.matrix;\n        },\n        set: function (value)\n        {\n            this.uniforms.matrix = new Float32Array(value);\n        }\n    },\n\n    /**\n     * Width of the object you are transforming\n     *\n     * @member {number}\n     * @memberof PIXI.filters.ConvolutionFilter#\n     */\n    width: {\n        get: function ()\n        {\n            return 1/this.uniforms.texelSize[0];\n        },\n        set: function (value)\n        {\n            this.uniforms.texelSize[0] = 1/value;\n        }\n    },\n\n    /**\n     * Height of the object you are transforming\n     *\n     * @member {number}\n     * @memberof PIXI.filters.ConvolutionFilter#\n     */\n    height: {\n        get: function ()\n        {\n            return 1/this.uniforms.texelSize[1];\n        },\n        set: function (value)\n        {\n            this.uniforms.texelSize[1] = 1/value;\n        }\n    }\n});\n","require('../check');\n\nvar filter = PIXI.filters.ConvolutionFilter = require('./ConvolutionFilter');\n\n// Export for requiring\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = filter;\n}"],"sourceRoot":"/source/"}