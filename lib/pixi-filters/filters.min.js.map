{"version":3,"sources":["node_modules/pixify/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/ascii/AsciiFilter.js","src/bloom/BloomFilter.js","src/check.js","src/convolution/ConvolutionFilter.js","src/crosshatch/CrossHatchFilter.js","src/dot/DotFilter.js","src/emboss/EmbossFilter.js","src/pixelate/PixelateFilter.js","src/rgb/RGBSplitFilter.js","src/shockwave/ShockwaveFilter.js","src/tiltshift/TiltShiftAxisFilter.js","src/tiltshift/TiltShiftFilter.js","src/tiltshift/TiltShiftXFilter.js","src/tiltshift/TiltShiftYFilter.js","src/twist/TwistFilter.js","src"],"names":["f","exports","module","define","amd","g","window","global","self","this","filters","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","AsciiFilter","PIXI","Filter","size","prototype","Object","create","constructor","defineProperties","get","uniforms","pixelSize","set","value","BloomFilter","blurXFilter","BlurXFilter","blurYFilter","BlurYFilter","blendMode","BLEND_MODES","SCREEN","defaultFilter","VoidFilter","apply","filterManager","input","output","renderTarget","getRenderTarget","returnRenderTarget","blur","blurX","blurY","ConvolutionFilter","matrix","width","height","Float32Array","texelSize","CrossHatchFilter","DotFilter","scale","angle","EmbossFilter","strength","PixelateFilter","RGBSplitFilter","red","green","blue","ShockwaveFilter","center","type","x","y","params","z","time","TiltShiftAxisFilter","gradientBlur","start","Point","innerHeight","end","delta","texSize","innerWidth","updateDelta","TiltShiftFilter","tiltShiftXFilter","TiltShiftXFilter","tiltShiftYFilter","TiltShiftYFilter","dx","dy","d","Math","sqrt","TwistFilter","radius","padding","offset","assign"],"mappings":"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","file":"filters.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\n\n// TODO (cengler) - The Y is flipped in this shader for some reason.\n\n/**\n * @author Vico @vicocotea\n * original shader : https://www.shadertoy.com/view/lssGDj by @movAX13h\n */\n\n/**\n * An ASCII filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nfunction AsciiFilter()\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nuniform vec4 filterArea;\\nuniform float pixelSize;\\nuniform sampler2D uSampler;\\n\\nvec2 mapCoord( vec2 coord )\\n{\\n    coord *= filterArea.xy;\\n    coord += filterArea.zw;\\n\\n    return coord;\\n}\\n\\nvec2 unmapCoord( vec2 coord )\\n{\\n    coord -= filterArea.zw;\\n    coord /= filterArea.xy;\\n\\n    return coord;\\n}\\n\\nvec2 pixelate(vec2 coord, vec2 size)\\n{\\n    return floor( coord / size ) * size;\\n}\\n\\nvec2 getMod(vec2 coord, vec2 size)\\n{\\n    return mod( coord , size) / size;\\n}\\n\\nfloat character(float n, vec2 p)\\n{\\n    p = floor(p*vec2(4.0, -4.0) + 2.5);\\n    if (clamp(p.x, 0.0, 4.0) == p.x && clamp(p.y, 0.0, 4.0) == p.y)\\n    {\\n        if (int(mod(n/exp2(p.x + 5.0*p.y), 2.0)) == 1) return 1.0;\\n    }\\n    return 0.0;\\n}\\n\\nvoid main()\\n{\\n    vec2 coord = mapCoord(vTextureCoord);\\n\\n    // get the rounded color..\\n    vec2 pixCoord = pixelate(coord, vec2(pixelSize));\\n    pixCoord = unmapCoord(pixCoord);\\n\\n    vec4 color = texture2D(uSampler, pixCoord);\\n\\n    // determine the character to use\\n    float gray = (color.r + color.g + color.b) / 3.0;\\n\\n    float n =  65536.0;             // .\\n    if (gray > 0.2) n = 65600.0;    // :\\n    if (gray > 0.3) n = 332772.0;   // *\\n    if (gray > 0.4) n = 15255086.0; // o\\n    if (gray > 0.5) n = 23385164.0; // &\\n    if (gray > 0.6) n = 15252014.0; // 8\\n    if (gray > 0.7) n = 13199452.0; // @\\n    if (gray > 0.8) n = 11512810.0; // #\\n\\n    // get the mod..\\n    vec2 modd = getMod(coord, vec2(pixelSize));\\n\\n    gl_FragColor = color * character( n, vec2(-1.0) + modd * 2.0);\\n\\n}\"\n    );\n\n    this.size = 8;\n}\n\nAsciiFilter.prototype = Object.create(PIXI.Filter.prototype);\nAsciiFilter.prototype.constructor = AsciiFilter;\nmodule.exports = AsciiFilter;\n\nObject.defineProperties(AsciiFilter.prototype, {\n    /**\n     * The pixel size used by the filter.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.AsciiFilter#\n     */\n    size: {\n        get: function ()\n        {\n            return this.uniforms.pixelSize;\n        },\n        set: function (value)\n        {\n            this.uniforms.pixelSize = value;\n        }\n    }\n});\n","var BlurXFilter = PIXI.filters.BlurXFilter,\n    BlurYFilter = PIXI.filters.BlurYFilter,\n    VoidFilter = PIXI.filters.VoidFilter;\n\n/**\n * The BloomFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nfunction BloomFilter()\n{\n    PIXI.Filter.call(this);\n\n    this.blurXFilter = new BlurXFilter();\n    this.blurYFilter = new BlurYFilter();\n\n    this.blurYFilter.blendMode = PIXI.BLEND_MODES.SCREEN;\n\n    this.defaultFilter = new VoidFilter();\n}\n\nBloomFilter.prototype = Object.create(PIXI.Filter.prototype);\nBloomFilter.prototype.constructor = BloomFilter;\nmodule.exports = BloomFilter;\n\nBloomFilter.prototype.apply = function (filterManager, input, output)\n{\n    var renderTarget = filterManager.getRenderTarget(true);\n\n    //TODO - copyTexSubImage2D could be used here?\n    this.defaultFilter.apply(filterManager, input, output);\n\n    this.blurXFilter.apply(filterManager, input, renderTarget);\n    this.blurYFilter.apply(filterManager, renderTarget, output);\n\n    filterManager.returnRenderTarget(renderTarget);\n};\n\nObject.defineProperties(BloomFilter.prototype, {\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @memberOf PIXI.filters.BloomFilter#\n     * @default 2\n     */\n    blur: {\n        get: function ()\n        {\n            return this.blurXFilter.blur;\n        },\n        set: function (value)\n        {\n            this.blurXFilter.blur = this.blurYFilter.blur = value;\n        }\n    },\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @memberOf PIXI.filters.BloomFilter#\n     * @default 2\n     */\n    blurX: {\n        get: function ()\n        {\n            return this.blurXFilter.blur;\n        },\n        set: function (value)\n        {\n            this.blurXFilter.blur = value;\n        }\n    },\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @memberOf PIXI.filters.BloomFilter#\n     * @default 2\n     */\n    blurY: {\n        get: function ()\n        {\n            return this.blurYFilter.blur;\n        },\n        set: function (value)\n        {\n            this.blurYFilter.blur = value;\n        }\n    }\n});\n","// Make sure PIXI global object is available\nif (typeof PIXI === \"undefined\") {\n    throw new Error('pixi.js is required to be included');\n}","\n\n/**\n * The ConvolutionFilter class applies a matrix convolution filter effect.\n * A convolution combines pixels in the input image with neighboring pixels to produce a new image.\n * A wide variety of image effects can be achieved through convolutions, including blurring, edge\n * detection, sharpening, embossing, and beveling. The matrix should be specified as a 9 point Array.\n * See http://docs.gimp.org/en/plug-in-convmatrix.html for more info.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param matrix {number[]} An array of values used for matrix transformation. Specified as a 9 point Array.\n * @param width {number} Width of the object you are transforming\n * @param height {number} Height of the object you are transforming\n */\nfunction ConvolutionFilter(matrix, width, height)\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying mediump vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec2 texelSize;\\nuniform float matrix[9];\\n\\nvoid main(void)\\n{\\n   vec4 c11 = texture2D(uSampler, vTextureCoord - texelSize); // top left\\n   vec4 c12 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - texelSize.y)); // top center\\n   vec4 c13 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y - texelSize.y)); // top right\\n\\n   vec4 c21 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y)); // mid left\\n   vec4 c22 = texture2D(uSampler, vTextureCoord); // mid center\\n   vec4 c23 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y)); // mid right\\n\\n   vec4 c31 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y + texelSize.y)); // bottom left\\n   vec4 c32 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + texelSize.y)); // bottom center\\n   vec4 c33 = texture2D(uSampler, vTextureCoord + texelSize); // bottom right\\n\\n   gl_FragColor =\\n       c11 * matrix[0] + c12 * matrix[1] + c13 * matrix[2] +\\n       c21 * matrix[3] + c22 * matrix[4] + c23 * matrix[5] +\\n       c31 * matrix[6] + c32 * matrix[7] + c33 * matrix[8];\\n\\n   gl_FragColor.a = c22.a;\\n}\\n\"\n    );\n\n    this.matrix = matrix;\n    this.width = width;\n    this.height = height;\n}\n\nConvolutionFilter.prototype = Object.create(PIXI.Filter.prototype);\nConvolutionFilter.prototype.constructor = ConvolutionFilter;\nmodule.exports = ConvolutionFilter;\n\nObject.defineProperties(ConvolutionFilter.prototype, {\n    /**\n     * An array of values used for matrix transformation. Specified as a 9 point Array.\n     *\n     * @member {number[]}\n     * @memberof PIXI.filters.ConvolutionFilter#\n     */\n    matrix: {\n        get: function ()\n        {\n            return this.uniforms.matrix;\n        },\n        set: function (value)\n        {\n            this.uniforms.matrix = new Float32Array(value);\n        }\n    },\n\n    /**\n     * Width of the object you are transforming\n     *\n     * @member {number}\n     * @memberof PIXI.filters.ConvolutionFilter#\n     */\n    width: {\n        get: function ()\n        {\n            return 1/this.uniforms.texelSize[0];\n        },\n        set: function (value)\n        {\n            this.uniforms.texelSize[0] = 1/value;\n        }\n    },\n\n    /**\n     * Height of the object you are transforming\n     *\n     * @member {number}\n     * @memberof PIXI.filters.ConvolutionFilter#\n     */\n    height: {\n        get: function ()\n        {\n            return 1/this.uniforms.texelSize[1];\n        },\n        set: function (value)\n        {\n            this.uniforms.texelSize[1] = 1/value;\n        }\n    }\n});\n","\n\n/**\n * A Cross Hatch effect filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nfunction CrossHatchFilter()\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void)\\n{\\n    float lum = length(texture2D(uSampler, vTextureCoord.xy).rgb);\\n\\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n    if (lum < 1.00)\\n    {\\n        if (mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0)\\n        {\\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n        }\\n    }\\n\\n    if (lum < 0.75)\\n    {\\n        if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0)\\n        {\\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n        }\\n    }\\n\\n    if (lum < 0.50)\\n    {\\n        if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0)\\n        {\\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n        }\\n    }\\n\\n    if (lum < 0.3)\\n    {\\n        if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0)\\n        {\\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n        }\\n    }\\n}\\n\"\n    );\n}\n\nCrossHatchFilter.prototype = Object.create(PIXI.Filter.prototype);\nCrossHatchFilter.prototype.constructor = CrossHatchFilter;\nmodule.exports = CrossHatchFilter;\n","\n\n/**\n * @author Mat Groves http://matgroves.com/ @Doormat23\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/fun/dotscreen.js\n */\n\n/**\n * This filter applies a dotscreen effect making display objects appear to be made out of\n * black and white halftone dots like an old printer.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nfunction DotFilter()\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform vec4 filterArea;\\nuniform sampler2D uSampler;\\n\\nuniform float angle;\\nuniform float scale;\\n\\nfloat pattern()\\n{\\n   float s = sin(angle), c = cos(angle);\\n   vec2 tex = vTextureCoord * filterArea.xy;\\n   vec2 point = vec2(\\n       c * tex.x - s * tex.y,\\n       s * tex.x + c * tex.y\\n   ) * scale;\\n   return (sin(point.x) * sin(point.y)) * 4.0;\\n}\\n\\nvoid main()\\n{\\n   vec4 color = texture2D(uSampler, vTextureCoord);\\n   float average = (color.r + color.g + color.b) / 3.0;\\n   gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);\\n}\\n\"\n    );\n\n    this.scale = 1;\n    this.angle = 5;\n}\n\nDotFilter.prototype = Object.create(PIXI.Filter.prototype);\nDotFilter.prototype.constructor = DotFilter;\nmodule.exports = DotFilter;\n\nObject.defineProperties(DotFilter.prototype, {\n    /**\n     * The scale of the effect.\n     * @member {number}\n     * @memberof PIXI.filters.DotFilter#\n     */\n    scale: {\n        get: function ()\n        {\n            return this.uniforms.scale;\n        },\n        set: function (value)\n        {\n            this.uniforms.scale = value;\n        }\n    },\n\n    /**\n     * The radius of the effect.\n     * @member {number}\n     * @memberof PIXI.filters.DotFilter#\n     */\n    angle: {\n        get: function ()\n        {\n            return this.uniforms.angle;\n        },\n        set: function (value)\n        {\n            this.uniforms.angle = value;\n        }\n    }\n});\n","\n\n/**\n * An RGB Split Filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nfunction EmbossFilter()\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform float strength;\\nuniform vec4 filterArea;\\n\\nvoid main(void)\\n{\\n\\tvec2 onePixel = vec2(1.0 / filterArea);\\n\\n\\tvec4 color;\\n\\n\\tcolor.rgb = vec3(0.5);\\n\\n\\tcolor -= texture2D(uSampler, vTextureCoord - onePixel) * strength;\\n\\tcolor += texture2D(uSampler, vTextureCoord + onePixel) * strength;\\n\\n\\tcolor.rgb = vec3((color.r + color.g + color.b) / 3.0);\\n\\n\\tfloat alpha = texture2D(uSampler, vTextureCoord).a;\\n\\n\\tgl_FragColor = vec4(color.rgb * alpha, alpha);\\n}\\n\"\n    );\n\n    this.strength = 5;\n}\n\nEmbossFilter.prototype = Object.create(PIXI.Filter.prototype);\nEmbossFilter.prototype.constructor = EmbossFilter;\nmodule.exports = EmbossFilter;\n\nObject.defineProperties(EmbossFilter.prototype, {\n    /**\n     * Strength of Emboss.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.EmbossFilter#\n     */\n    strength: {\n        get: function ()\n        {\n            return this.uniforms.strength;\n        },\n        set: function (value)\n        {\n            this.uniforms.strength = value;\n        }\n    },\n\n\n});\n","// @see https://github.com/substack/brfs/issues/25\n\n\n/**\n * This filter applies a pixelate effect making display objects appear 'blocky'.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\nfunction PixelateFilter()\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform vec2 size;\\nuniform sampler2D uSampler;\\n\\nuniform vec4 filterArea;\\n\\nvec2 mapCoord( vec2 coord )\\n{\\n    coord *= filterArea.xy;\\n    coord += filterArea.zw;\\n\\n    return coord;\\n}\\n\\nvec2 unmapCoord( vec2 coord )\\n{\\n    coord -= filterArea.zw;\\n    coord /= filterArea.xy;\\n\\n    return coord;\\n}\\n\\nvec2 pixelate(vec2 coord, vec2 size)\\n{\\n\\treturn floor( coord / size ) * size;\\n}\\n\\nvoid main(void)\\n{\\n    vec2 coord = mapCoord(vTextureCoord);\\n\\n    coord = pixelate(coord, size);\\n\\n    coord = unmapCoord(coord);\\n\\n    gl_FragColor = texture2D(uSampler, coord);\\n}\\n\"\n    );\n\n    this.size = [10,10];\n\n}\n\nPixelateFilter.prototype = Object.create(PIXI.Filter.prototype);\nPixelateFilter.prototype.constructor = PixelateFilter;\nmodule.exports = PixelateFilter;\n\nObject.defineProperties(PixelateFilter.prototype, {\n    /**\n     * This a point that describes the size of the blocks.\n     * x is the width of the block and y is the height.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.PixelateFilter#\n     */\n    size: {\n        get: function ()\n        {\n            return this.uniforms.size;\n        },\n        set: function (value)\n        {\n            this.uniforms.size.value = value;\n        }\n    }\n});\n","\n\n/**\n * An RGB Split Filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nfunction RGBSplitFilter()\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 filterArea;\\nuniform vec2 red;\\nuniform vec2 green;\\nuniform vec2 blue;\\n\\nvoid main(void)\\n{\\n   gl_FragColor.r = texture2D(uSampler, vTextureCoord + red/filterArea.xy).r;\\n   gl_FragColor.g = texture2D(uSampler, vTextureCoord + green/filterArea.xy).g;\\n   gl_FragColor.b = texture2D(uSampler, vTextureCoord + blue/filterArea.xy).b;\\n   gl_FragColor.a = texture2D(uSampler, vTextureCoord).a;\\n}\\n\"\n    );\n\n    this.red = [-10, 0];\n    this.green = [0, 10];\n    this.blue = [0, 0];\n}\n\nRGBSplitFilter.prototype = Object.create(PIXI.Filter.prototype);\nRGBSplitFilter.prototype.constructor = RGBSplitFilter;\nmodule.exports = RGBSplitFilter;\n\nObject.defineProperties(RGBSplitFilter.prototype, {\n    /**\n     * Red channel offset.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.RGBSplitFilter#\n     */\n    red: {\n        get: function ()\n        {\n            return this.uniforms.red;\n        },\n        set: function (value)\n        {\n            this.uniforms.red = value;\n        }\n    },\n\n    /**\n     * Green channel offset.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.RGBSplitFilter#\n     */\n    green: {\n        get: function ()\n        {\n            return this.uniforms.green;\n        },\n        set: function (value)\n        {\n            this.uniforms.green = value;\n        }\n    },\n\n    /**\n     * Blue offset.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.RGBSplitFilter#\n     */\n    blue: {\n        get: function ()\n        {\n            return this.uniforms.blue.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.blue.value = value;\n        }\n    }\n});\n","\n\n/**\n * The ColorMatrixFilter class lets you apply a 4x4 matrix transformation on the RGBA\n * color and alpha values of every pixel on your displayObject to produce a result\n * with a new set of RGBA color and alpha values. It's pretty powerful!\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nfunction ShockwaveFilter()\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\n\\nuniform vec2 center;\\nuniform vec3 params; // 10.0, 0.8, 0.1\\nuniform float time;\\n\\nvoid main()\\n{\\n    vec2 uv = vTextureCoord;\\n    vec2 texCoord = uv;\\n\\n    float dist = distance(uv, center);\\n\\n    if ( (dist <= (time + params.z)) && (dist >= (time - params.z)) )\\n    {\\n        float diff = (dist - time);\\n        float powDiff = 1.0 - pow(abs(diff*params.x), params.y);\\n\\n        float diffTime = diff  * powDiff;\\n        vec2 diffUV = normalize(uv - center);\\n        texCoord = uv + (diffUV * diffTime);\\n    }\\n\\n    gl_FragColor = texture2D(uSampler, texCoord);\\n}\\n\",\n        // custom uniforms\n        {\n            center: { type: 'v2', value: { x: 0.5, y: 0.5 } },\n            params: { type: 'v3', value: { x: 10, y: 0.8, z: 0.1 } },\n            time: { type: '1f', value: 0 }\n        }\n    );\n\n    this.center = [0.5, 0.5];\n    this.params = [10, 0.8, 0.1];\n    this.time = 0;\n}\n\nShockwaveFilter.prototype = Object.create(PIXI.Filter.prototype);\nShockwaveFilter.prototype.constructor = ShockwaveFilter;\nmodule.exports = ShockwaveFilter;\n\nObject.defineProperties(ShockwaveFilter.prototype, {\n    /**\n     * Sets the center of the shockwave in normalized screen coords. That is\n     * (0,0) is the top-left and (1,1) is the bottom right.\n     *\n     * @member {object<string, number>}\n     * @memberof PIXI.filters.ShockwaveFilter#\n     */\n    center: {\n        get: function ()\n        {\n            return this.uniforms.center;\n        },\n        set: function (value)\n        {\n            this.uniforms.center = value;\n        }\n    },\n    /**\n     * Sets the params of the shockwave. These modify the look and behavior of\n     * the shockwave as it ripples out.\n     *\n     * @member {object<string, number>}\n     * @memberof PIXI.filters.ShockwaveFilter#\n     */\n    params: {\n        get: function ()\n        {\n            return this.uniforms.params;\n        },\n        set: function (value)\n        {\n            this.uniforms.params = value;\n        }\n    },\n    /**\n     * Sets the elapsed time of the shockwave. This controls the speed at which\n     * the shockwave ripples out.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.ShockwaveFilter#\n     */\n    time: {\n        get: function ()\n        {\n            return this.uniforms.time;\n        },\n        set: function (value)\n        {\n            this.uniforms.time = value;\n        }\n    }\n});\n","\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftAxisFilter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nfunction TiltShiftAxisFilter()\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform float blur;\\nuniform float gradientBlur;\\nuniform vec2 start;\\nuniform vec2 end;\\nuniform vec2 delta;\\nuniform vec2 texSize;\\n\\nfloat random(vec3 scale, float seed)\\n{\\n    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\\n}\\n\\nvoid main(void)\\n{\\n    vec4 color = vec4(0.0);\\n    float total = 0.0;\\n\\n    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\n    vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\\n    float radius = smoothstep(0.0, 1.0, abs(dot(vTextureCoord * texSize - start, normal)) / gradientBlur) * blur;\\n\\n    for (float t = -30.0; t <= 30.0; t++)\\n    {\\n        float percent = (t + offset - 0.5) / 30.0;\\n        float weight = 1.0 - abs(percent);\\n        vec4 sample = texture2D(uSampler, vTextureCoord + delta / texSize * percent * radius);\\n        sample.rgb *= sample.a;\\n        color += sample * weight;\\n        total += weight;\\n    }\\n\\n    gl_FragColor = color / total;\\n    gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\\n}\\n\"\n\n    );\n\n    this.uniforms.blur = 100;\n    this.uniforms.gradientBlur = 600;\n    this.uniforms.start = new PIXI.Point(0, window.innerHeight / 2);\n    this.uniforms.end = new PIXI.Point(600, window.innerHeight / 2);\n    this.uniforms.delta = new PIXI.Point(30, 30);\n    this.uniforms.texSize = new PIXI.Point(window.innerWidth, window.innerHeight);\n\n    this.updateDelta();\n}\n\nTiltShiftAxisFilter.prototype = Object.create(PIXI.Filter.prototype);\nTiltShiftAxisFilter.prototype.constructor = TiltShiftAxisFilter;\nmodule.exports = TiltShiftAxisFilter;\n\n/**\n * Updates the filter delta values.\n * This is overridden in the X and Y filters, does nothing for this class.\n *\n */\nTiltShiftAxisFilter.prototype.updateDelta = function ()\n{\n    this.uniforms.delta.x = 0;\n    this.uniforms.delta.y = 0;\n};\n\nObject.defineProperties(TiltShiftAxisFilter.prototype, {\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    blur: {\n        get: function ()\n        {\n            return this.uniforms.blur;\n        },\n        set: function (value)\n        {\n            this.uniforms.blur = value;\n        }\n    },\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    gradientBlur: {\n        get: function ()\n        {\n            return this.uniforms.gradientBlur;\n        },\n        set: function (value)\n        {\n            this.uniforms.gradientBlur = value;\n        }\n    },\n\n    /**\n     * The X value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    start: {\n        get: function ()\n        {\n            return this.uniforms.start;\n        },\n        set: function (value)\n        {\n            this.uniforms.start = value;\n            this.updateDelta();\n        }\n    },\n\n    /**\n     * The X value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    end: {\n        get: function ()\n        {\n            return this.uniforms.end;\n        },\n        set: function (value)\n        {\n            this.uniforms.end = value;\n            this.updateDelta();\n        }\n    }\n});\n","var TiltShiftXFilter = require('./TiltShiftXFilter'),\n    TiltShiftYFilter = require('./TiltShiftYFilter');\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShift Filter. Manages the pass of both a TiltShiftXFilter and TiltShiftYFilter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nfunction TiltShiftFilter()\n{\n    PIXI.Filter.call(this);\n\n    this.tiltShiftXFilter = new TiltShiftXFilter();\n    this.tiltShiftYFilter = new TiltShiftYFilter();\n}\n\nTiltShiftFilter.prototype = Object.create(PIXI.Filter.prototype);\nTiltShiftFilter.prototype.constructor = TiltShiftFilter;\nmodule.exports = TiltShiftFilter;\n\nTiltShiftFilter.prototype.apply = function (filterManager, input, output)\n{\n    var renderTarget = filterManager.getRenderTarget(true);\n\n    this.tiltShiftXFilter.apply(filterManager, input, renderTarget);\n\n    this.tiltShiftYFilter.apply(filterManager, renderTarget, output);\n\n    filterManager.returnRenderTarget(renderTarget);\n};\n\nObject.defineProperties(TiltShiftFilter.prototype, {\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftFilter#\n     */\n    blur: {\n        get: function ()\n        {\n            return this.tiltShiftXFilter.blur;\n        },\n        set: function (value)\n        {\n            this.tiltShiftXFilter.blur = this.tiltShiftYFilter.blur = value;\n        }\n    },\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftFilter#\n     */\n    gradientBlur: {\n        get: function ()\n        {\n            return this.tiltShiftXFilter.gradientBlur;\n        },\n        set: function (value)\n        {\n            this.tiltShiftXFilter.gradientBlur = this.tiltShiftYFilter.gradientBlur = value;\n        }\n    },\n\n    /**\n     * The Y value to start the effect at.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftFilter#\n     */\n    start: {\n        get: function ()\n        {\n            return this.tiltShiftXFilter.start;\n        },\n        set: function (value)\n        {\n            this.tiltShiftXFilter.start = this.tiltShiftYFilter.start = value;\n        }\n    },\n\n    /**\n     * The Y value to end the effect at.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftFilter#\n     */\n    end: {\n        get: function ()\n        {\n            return this.tiltShiftXFilter.end;\n        },\n        set: function (value)\n        {\n            this.tiltShiftXFilter.end = this.tiltShiftYFilter.end = value;\n        }\n    }\n});\n","var TiltShiftAxisFilter = require('./TiltShiftAxisFilter');\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftXFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n */\nfunction TiltShiftXFilter()\n{\n    TiltShiftAxisFilter.call(this);\n}\n\nTiltShiftXFilter.prototype = Object.create(TiltShiftAxisFilter.prototype);\nTiltShiftXFilter.prototype.constructor = TiltShiftXFilter;\nmodule.exports = TiltShiftXFilter;\n\n/**\n * Updates the filter delta values.\n *\n */\nTiltShiftXFilter.prototype.updateDelta = function ()\n{\n    var dx = this.uniforms.end.x - this.uniforms.start.x;\n    var dy = this.uniforms.end.y - this.uniforms.start.y;\n    var d = Math.sqrt(dx * dx + dy * dy);\n\n    this.uniforms.delta.x = dx / d;\n    this.uniforms.delta.y = dy / d;\n};\n","var TiltShiftAxisFilter = require('./TiltShiftAxisFilter');\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftYFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n */\nfunction TiltShiftYFilter()\n{\n    TiltShiftAxisFilter.call(this);\n}\n\nTiltShiftYFilter.prototype = Object.create(TiltShiftAxisFilter.prototype);\nTiltShiftYFilter.prototype.constructor = TiltShiftYFilter;\nmodule.exports = TiltShiftYFilter;\n\n/**\n * Updates the filter delta values.\n *\n */\nTiltShiftYFilter.prototype.updateDelta = function ()\n{\n    var dx = this.uniforms.end.x - this.uniforms.start.x;\n    var dy = this.uniforms.end.y - this.uniforms.start.y;\n    var d = Math.sqrt(dx * dx + dy * dy);\n\n    this.uniforms.delta.x = -dy / d;\n    this.uniforms.delta.y = dx / d;\n};\n","\n\n/**\n * This filter applies a twist effect making display objects appear twisted in the given direction.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nfunction TwistFilter()\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform float radius;\\nuniform float angle;\\nuniform vec2 offset;\\nuniform vec4 filterArea;\\n\\nvec2 mapCoord( vec2 coord )\\n{\\n    coord *= filterArea.xy;\\n    coord += filterArea.zw;\\n\\n    return coord;\\n}\\n\\nvec2 unmapCoord( vec2 coord )\\n{\\n    coord -= filterArea.zw;\\n    coord /= filterArea.xy;\\n\\n    return coord;\\n}\\n\\nvec2 twist(vec2 coord)\\n{\\n    coord -= offset;\\n\\n    float dist = length(coord);\\n\\n    if (dist < radius)\\n    {\\n        float ratioDist = (radius - dist) / radius;\\n        float angleMod = ratioDist * ratioDist * angle;\\n        float s = sin(angleMod);\\n        float c = cos(angleMod);\\n        coord = vec2(coord.x * c - coord.y * s, coord.x * s + coord.y * c);\\n    }\\n\\n    coord += offset;\\n\\n    return coord;\\n}\\n\\nvoid main(void)\\n{\\n\\n    vec2 coord = mapCoord(vTextureCoord);\\n\\n    coord = twist(coord);\\n\\n    coord = unmapCoord(coord);\\n\\n    gl_FragColor = texture2D(uSampler, coord );\\n\\n}\\n\"\n    );\n\n    this.radius = 200;\n    this.angle = 4;\n    this.padding = 20;\n}\n\nTwistFilter.prototype = Object.create(PIXI.Filter.prototype);\nTwistFilter.prototype.constructor = TwistFilter;\nmodule.exports = TwistFilter;\n\nObject.defineProperties(TwistFilter.prototype, {\n    /**\n     * This point describes the the offset of the twist.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TwistFilter#\n     */\n    offset: {\n        get: function ()\n        {\n            return this.uniforms.offset;\n        },\n        set: function (value)\n        {\n            this.uniforms.offset = value;\n        }\n    },\n\n    /**\n     * This radius of the twist.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TwistFilter#\n     */\n    radius: {\n        get: function ()\n        {\n            return this.uniforms.radius;\n        },\n        set: function (value)\n        {\n            this.uniforms.radius = value;\n        }\n    },\n\n    /**\n     * This angle of the twist.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TwistFilter#\n     */\n    angle: {\n        get: function ()\n        {\n            return this.uniforms.angle;\n        },\n        set: function (value)\n        {\n            this.uniforms.angle = value;\n        }\n    }\n});\n","require('./check');\n\n// Require built filters\nvar filters = {\n    AsciiFilter: require('./ascii/AsciiFilter'),\n    BloomFilter: require('./bloom/BloomFilter'),\n    ConvolutionFilter: require('./convolution/ConvolutionFilter'),\n    CrossHatchFilter: require('./crosshatch/CrossHatchFilter'),\n    DotFilter: require('./dot/DotFilter'),\n    EmbossFilter: require('./emboss/EmbossFilter'),\n    PixelateFilter: require('./pixelate/PixelateFilter'),\n    RGBSplitFilter: require('./rgb/RGBSplitFilter'),\n    ShockwaveFilter: require('./shockwave/ShockwaveFilter'),\n    TiltShiftFilter: require('./tiltshift/TiltShiftFilter'),\n    TiltShiftAxisFilter: require('./tiltshift/TiltShiftAxisFilter'),\n    TiltShiftXFilter: require('./tiltshift/TiltShiftXFilter'),\n    TiltShiftYFilter: require('./tiltshift/TiltShiftYFilter'),\n    TwistFilter: require('./twist/TwistFilter')\n};\n\n// Assign to filters\nObject.assign(PIXI.filters, filters);\n\n// Export for requiring\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = filters;\n}"],"sourceRoot":"/source/"}