{"version":3,"sources":["node_modules/pixify/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/check.js","src/dot/DotFilter.js","src/dot"],"names":[],"mappings":";;;;;;;AAAA;ACAA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dot.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Make sure PIXI global object is available\nif (typeof PIXI === \"undefined\") {\n    throw new Error('pixi.js is required to be included');\n}","\n\n/**\n * @author Mat Groves http://matgroves.com/ @Doormat23\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/fun/dotscreen.js\n */\n\n/**\n * This filter applies a dotscreen effect making display objects appear to be made out of\n * black and white halftone dots like an old printer.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nfunction DotFilter()\n{\n    PIXI.Filter.call(this,\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\",\n        // fragment shader\n        \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform vec4 filterArea;\\nuniform sampler2D uSampler;\\n\\nuniform float angle;\\nuniform float scale;\\n\\nfloat pattern()\\n{\\n   float s = sin(angle), c = cos(angle);\\n   vec2 tex = vTextureCoord * filterArea.xy;\\n   vec2 point = vec2(\\n       c * tex.x - s * tex.y,\\n       s * tex.x + c * tex.y\\n   ) * scale;\\n   return (sin(point.x) * sin(point.y)) * 4.0;\\n}\\n\\nvoid main()\\n{\\n   vec4 color = texture2D(uSampler, vTextureCoord);\\n   float average = (color.r + color.g + color.b) / 3.0;\\n   gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);\\n}\\n\"\n    );\n\n    this.scale = 1;\n    this.angle = 5;\n}\n\nDotFilter.prototype = Object.create(PIXI.Filter.prototype);\nDotFilter.prototype.constructor = DotFilter;\nmodule.exports = DotFilter;\n\nObject.defineProperties(DotFilter.prototype, {\n    /**\n     * The scale of the effect.\n     * @member {number}\n     * @memberof PIXI.filters.DotFilter#\n     */\n    scale: {\n        get: function ()\n        {\n            return this.uniforms.scale;\n        },\n        set: function (value)\n        {\n            this.uniforms.scale = value;\n        }\n    },\n\n    /**\n     * The radius of the effect.\n     * @member {number}\n     * @memberof PIXI.filters.DotFilter#\n     */\n    angle: {\n        get: function ()\n        {\n            return this.uniforms.angle;\n        },\n        set: function (value)\n        {\n            this.uniforms.angle = value;\n        }\n    }\n});\n","require('../check');\n\nvar filter = PIXI.filters.DotFilter = require('./DotFilter');\n\n// Export for requiring\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = filter;\n}"],"sourceRoot":"/source/"}